// ==================== –û–°–ù–û–í–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================
let currentCategory = window.currentCategory;
let currentPage = window.currentPage || 1;
let totalPages = window.totalPages || 1;
let isLoading = false;
let currentSort = 'default';
let allPlaces = [];
let isInitialLoad = true;
let userLocation = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const navbar = document.querySelector('.navbar');
const smartPagination = document.querySelector('.smart-pagination');

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
document.addEventListener('DOMContentLoaded', function() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä
    const lastFilter = localStorage.getItem('lastSortFilter');
    const sortFilter = document.getElementById('sortFilter');
    if (lastFilter && sortFilter) {
        sortFilter.value = lastFilter;
        currentSort = lastFilter;
        console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä:', lastFilter);
    }

    loadAllPlaces();
    initFilters();
    initPagination(totalPages, currentPage);
    initScrollSystem();
    initHeaderScroll();
    initFavorites();

    // –ó–ê–ü–†–ê–®–ò–í–ê–ï–ú –ì–ï–û–õ–û–ö–ê–¶–ò–Æ –°–†–ê–ó–£ –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï
    setTimeout(() => {
        getUserLocation().catch(() => getLocationByIP())
        .then(location => {
            console.log('üéâ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ü–†–ò–ú–ï–ù–Ø–ï–ú –§–ò–õ–¨–¢–† –ï–°–õ–ò –û–ù –í–´–ë–†–ê–ù
            if (currentSort === 'distance') {
                console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è...');
                setTimeout(() => {
                    applySortingToAll();
                }, 500);
            }
        }).catch(error => {
            console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
        });
    }, 1000);
});

// ==================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ====================
async function loadAllPlaces() {
    showLoading();

    try {
        console.log(`üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${currentCategory}`);
        const allPlacesData = [];

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const response = await fetch(`/api/categories/${currentCategory}?page=1`);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.places && data.places.length > 0) {
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.places.length} –∑–∞–≤–µ–¥–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${currentCategory}`);

            data.places.forEach(place => {
                // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if (place.category_en === currentCategory) {
                    allPlacesData.push({
                        id: place.id,
                        title: place.title,
                        description: place.description,
                        telephone: place.telephone,
                        address: place.address,
                        image_path: place.image_path,
                        slug: place.slug,
                        category_en: place.category_en,  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é!
                        avg_rating: place.avg_rating || 0,
                        name: (place.title || '').toLowerCase(),
                        latitude: place.latitude,
                        longitude: place.longitude
                    });
                } else {
                    console.warn(`üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${place.title} (${place.category_en})`);
                }
            });
        }

        allPlaces = allPlacesData;
        totalPages = data.total_pages || 1;

        console.log(`‚úÖ –ò—Ç–æ–≥: ${allPlaces.length} –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${currentCategory}`);

        renderCurrentPage();
        initPagination(totalPages, currentPage);
        hideLoading();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        hideLoading();
        alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${currentCategory}: ${error.message}`);
    }
}