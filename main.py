import hashlib
import json
import re
import os

import pytz
import math
import sqlite3

from werkzeug.utils import secure_filename, redirect
from flask_bcrypt import Bcrypt
from flask_sqlalchemy import SQLAlchemy
from flask import Flask, jsonify, render_template, request, url_for, session, flash
from datetime import datetime, timezone, timedelta
from flask_migrate import Migrate
from functools import wraps
from flask import abort

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
migrate = Migrate(app, db) #–û–±–Ω–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –±–¥
def get_moscow_time():
    return datetime.now(MOSCOW_TZ).replace(tzinfo=None)  # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
UPLOAD_FOLDER = os.path.join('static', '–§–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π')
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['ALLOWED_EXTENSIONS'] = ALLOWED_EXTENSIONS
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# –†–æ–ª–∏ –∏ –∏—Ö –ø—Ä–∞–≤–∞
# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤
ROLE_PERMISSIONS = {
    'trainee': {
        'name': '–°—Ç–∞–∂—ë—Ä',
        'permissions': [
            'view_dashboard',
            'create_place',
            'create_category',
            'view_stats'
        ]
    },
    'moderator': {
        'name': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
        'permissions': [
            'view_dashboard',
            'create_place', 'edit_place', 'delete_place',
            'create_category', 'edit_category', 'delete_category',
            'edit_review', 'delete_review',
            'manage_trainees',  # –ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞–∂—ë—Ä–∞–º–∏
            'view_stats'
        ]
    },
    'editor': {
        'name': '–†–µ–¥–∞–∫—Ç–æ—Ä',
        'permissions': [
            'view_dashboard',
            'create_place', 'edit_place', 'delete_place',
            'create_category', 'edit_category', 'delete_category',
            'edit_review', 'delete_review',
            'manage_trainees', 'manage_moderators', 'manage_editors',
            'view_stats',
            'system_settings'
        ]
    },
    'admin': {
        'name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'permissions': ['all']  # –í—Å–µ –ø—Ä–∞–≤–∞
    }
}

def get_role_permissions(role):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–æ–ª–∏"""
    role_permissions = {
        'trainee': ['create_place', 'create_category', 'view_stats'],
        'moderator': ['create_place', 'edit_place', 'delete_place',
                      'create_category', 'edit_category', 'delete_category',
                      'edit_review', 'delete_review', 'manage_trainees', 'view_stats'],
        'editor': ['create_place', 'edit_place', 'delete_place',
                   'create_category', 'edit_category', 'delete_category',
                   'edit_review', 'delete_review', 'manage_trainees', 'manage_moderators',
                   'manage_editors', 'view_stats', 'system_settings'],
        'admin': ['all']
    }

    if role not in role_permissions:
        return []

    permissions = role_permissions[role]
    if 'all' in permissions:
        return ['all']  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–≤
    return permissions

def get_role_display_name(role):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏"""
    return ROLE_PERMISSIONS.get(role, {}).get('name', role)


def permission_required(permission):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤"""

    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if 'username' not in session:
                abort(401)

            user = User.query.filter_by(username=session['username']).first()

            # Admin –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
            if user.role == 'admin':
                return f(*args, **kwargs)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ
            user_permissions = get_role_permissions(user.role)
            if permission not in user_permissions and 'all' not in user_permissions:
                return render_template('Error.html', error_code=403), 403

            return f(*args, **kwargs)

        return decorated_function

    return decorator

def role_required(required_permission):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if 'username' not in session:
                abort(401)

            user = User.query.filter_by(username=session['username']).first()
            if not user:
                abort(401)

            # Admin –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
            if user.role == 'admin':
                return f(*args, **kwargs)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–æ–ª–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê)
            user_permissions = get_role_permissions(user.role)
            if required_permission not in user_permissions and 'all' not in user_permissions:
                return render_template('Error.html', error_code=403), 403

            return f(*args, **kwargs)
        return decorated_function
    return decorator

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
def trainee_required(f):
    return role_required('create_place')(f)

def moderator_required(f):
    return role_required('manage_trainees')(f)

def editor_required(f):
    return role_required('manage_moderators')(f)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), nullable=False, unique=True)
    password = db.Column(db.String(150), nullable=False)
    role = db.Column(db.String(50), default='trainee')  # trainee, moderator, editor, admin
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)

    def __repr__(self):
        return f'<User {self.username} ({self.role})>'

    @property
    def role_display(self):
        return get_role_display_name(self.role)

    def has_permission(self, permission):
        user_permissions = get_role_permissions(self.role)
        return 'all' in user_permissions or permission in user_permissions

    def can_manage_user(self, target_user):
        if self.id == target_user.id:
            return False
        role_hierarchy = {'trainee': 1, 'moderator': 2, 'editor': 3, 'admin': 4}
        return role_hierarchy.get(self.role, 0) > role_hierarchy.get(target_user.role, 0)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
class Secret(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key_name = db.Column(db.String(255), nullable=False, unique=True)
    secret_value = db.Column(db.String(255), nullable=False)

#–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
class Place(db.Model):
    __tablename__ = 'place'

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=True)
    description = db.Column(db.Text, nullable=True)
    tags = db.Column(db.Text, nullable=True)
    telephone = db.Column(db.String(20), nullable=True)
    address = db.Column(db.String(200), nullable=True)
    image_path = db.Column(db.String(200), nullable=True)
    category = db.Column(db.String(50), nullable=False, default='Restaurant')
    category_en = db.Column(db.String(50), nullable=False, default='Restaurant')
    slug = db.Column(db.String(100), unique=True, nullable=True)  # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö URL
    latitude = db.Column(db.Float)  # —à–∏—Ä–æ—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç
    longitude = db.Column(db.Float)  # –¥–æ–ª–≥–æ—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç
    working_hours = db.Column(db.JSON)  # {"–ø–Ω-–ø—Ç": "10:00-22:00", "—Å–±-–≤—Å": "11:00-23:00"}
    menu = db.Column(db.Text, default='{}')  # {"category": [{"name": "", "price": ""}]}

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    CATEGORY_MAPPING = {
        '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'Restaurant',
        '–ö–∞—Ñ–µ': 'Cafe',
        '–ú–∞–≥–∞–∑–∏–Ω': 'Shop',
        '–ú—É–∑–µ–π': 'Museum',
        '–¢–µ–∞—Ç—Ä': 'Theatre',
        '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞': 'Library',
        '–ü–∞—Ä–∫': 'Park',
        '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä': 'Cinema',
        '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞': 'Sports',
        '–¶–µ—Ä–∫–æ–≤—å': 'Church',
        '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞': 'Hotel',
        '–ò–∫–æ–Ω–∫–∞': 'Icon'
    }

    def __repr__(self):
        return f'<Place {self.title}>'

    def get_menu_dict(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—É—Å—Ç–æ—Ç—É"""
        try:
            if self.menu and self.menu.strip():
                menu_data = json.loads(self.menu)
                # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –Ω–µ –ø—É—Å—Ç–æ–µ
                if menu_data and isinstance(menu_data, dict):
                    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    filtered_menu = {}
                    for category, items in menu_data.items():
                        if items and isinstance(items, list) and len(items) > 0:
                            # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ items
                            filtered_items = [item for item in items if item.get('name')]
                            if filtered_items:
                                filtered_menu[category] = filtered_items

                    return filtered_menu if filtered_menu else {}
            return {}
        except (json.JSONDecodeError, TypeError, ValueError) as e:
            print(f"Error parsing menu for place {self.id}: {e}")
            return {}

    def has_menu(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –º–µ–Ω—é (–Ω–µ –ø—É—Å—Ç–æ–µ)"""
        try:
            if self.menu and self.menu.strip():
                menu_data = json.loads(self.menu)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ–Ω—é –Ω–µ –ø—É—Å—Ç–æ–µ
                if menu_data and isinstance(menu_data, dict):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å items
                    for category, items in menu_data.items():
                        if items and isinstance(items, list) and len(items) > 0:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ–ø—É—Å—Ç–æ–π item
                            for item in items:
                                if item.get('name') and item.get('name').strip():
                                    return True
            return False
        except (json.JSONDecodeError, TypeError, ValueError):
            return False

    def get_menu_data(self):
        """–ê–ª–∏–∞—Å –¥–ª—è get_menu_dict"""
        return self.get_menu_dict()

    def get_tags_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞"""
        if self.tags:
            return [tag.strip() for tag in self.tags.split(',')]
        return []

    def get_working_hours_display(self):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            if self.working_hours:
                # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                if isinstance(self.working_hours, dict):
                    hours_data = self.working_hours
                else:
                    # –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                    hours_data = json.loads(self.working_hours)

                if hours_data and isinstance(hours_data, dict):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
                    result = []
                    for days, hours in hours_data.items():
                        result.append(f"{days}: {hours}")
                    return "<br>".join(result)
            return "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: {e}")
            return "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    def get_working_hours_safe(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            if self.working_hours:
                if isinstance(self.working_hours, dict):
                    return self.working_hours
                return json.loads(self.working_hours)
            return {}
        except:
            return {}

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class Restaurant(db.Model):
    __tablename__ = 'restaurants'
    id = db.Column(db.String(50), primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    total_rating = db.Column(db.Float, default=0.0)
    review_count = db.Column(db.Integer, default=0)
    last_updated = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Review(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    restaurant_id = db.Column(db.String(50), nullable=False)
    username = db.Column(db.String(100), nullable=False)
    rating = db.Column(db.Integer, nullable=False)
    comment = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=get_moscow_time)
    updated_at = db.Column(db.DateTime)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    likes = db.Column(db.Integer, default=0)
    dislikes = db.Column(db.Integer, default=0)
    user_token = db.Column(db.String(255))  # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    device_fingerprint = db.Column(db.String(255))  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –ø–æ–ª–µ
    user_ratings = db.Column(db.JSON, default=dict)

# –•–µ–ª–ø–µ—Ä-—Ñ—É–Ω–∫—Ü–∏–∏
def get_client_hash(request):
    ip = request.remote_addr or '127.0.0.1'
    user_agent = request.headers.get('User-Agent', '')
    return hashlib.sha256(f"{ip}_{user_agent}".encode()).hexdigest()

def allowed_file(filename):
    return '.' in filename and \
        filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_user_hash(request):
    ip = request.remote_addr
    user_agent = request.headers.get('User-Agent', '')
    return hashlib.sha256(f"{ip}_{user_agent}".encode()).hexdigest()

def update_restaurant_stats(restaurant_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤"""
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {restaurant_id}")

    reviews = Review.query.filter_by(restaurant_id=restaurant_id).all()
    print(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")

    if not reviews:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        restaurant = Restaurant.query.get(restaurant_id)
        if restaurant:
            restaurant.total_rating = 0.0
            restaurant.review_count = 0
            restaurant.last_updated = datetime.utcnow()
            db.session.commit()
            print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è {restaurant_id}")
        return

    total_rating = sum(review.rating for review in reviews)
    review_count = len(reviews)
    average_rating = total_rating / review_count

    print(f"–†–∞—Å—á–µ—Ç –¥–ª—è {restaurant_id}: –æ—Ç–∑—ã–≤–æ–≤={review_count}, —Å—É–º–º–∞={total_rating}, —Å—Ä–µ–¥–Ω–µ–µ={average_rating}")

    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    restaurant = Restaurant.query.get(restaurant_id)
    if not restaurant:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        place = Place.query.get(int(restaurant_id)) if restaurant_id.isdigit() else None
        restaurant_name = place.title if place else f"Place {restaurant_id}"

        restaurant = Restaurant(
            id=restaurant_id,
            name=restaurant_name,
            total_rating=average_rating,
            review_count=review_count
        )
        db.session.add(restaurant)
        print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_id} - {restaurant_name}")
    else:
        restaurant.total_rating = average_rating
        restaurant.review_count = review_count
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_id}")

    restaurant.last_updated = datetime.utcnow()
    db.session.commit()
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {restaurant_id} - —Ä–µ–π—Ç–∏–Ω–≥ {average_rating}, –æ—Ç–∑—ã–≤–æ–≤ {review_count}")

# –í –º–æ–¥–µ–ª—å Review –¥–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
def can_edit(self):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (3 —á–∞—Å–∞)"""
    time_diff = datetime.now(timezone.utc) - self.created_at
    return time_diff.total_seconds() <= 3 * 3600

def can_delete(self):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è (6 —á–∞—Å–æ–≤)"""
    time_diff = datetime.now(timezone.utc) - self.created_at
    return time_diff.total_seconds() <= 6 * 3600

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_secret(key_name, secret_value):
    with app.app_context():
        existing_secret = Secret.query.filter_by(key_name=key_name).first()
        if existing_secret:
            return
        new_secret = Secret(key_name=key_name, secret_value=secret_value)
        db.session.add(new_secret)
        db.session.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_secret(key_name):
    with app.app_context():
        secret = Secret.query.filter_by(key_name=key_name).first()
        return secret.secret_value if secret else None

def advanced_search(query):
    """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∑–∞–ø–∞—Å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –∏ –î–û–ë–ê–í–õ–ï–ù–ù–´–ú –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
    precise_results = precise_search(query)

    if precise_results.count() > 0:
        print(f"–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª {precise_results.count()} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return precise_results

def precise_search(query):
    """–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Å–ª–æ–≤, –í–ö–õ–Æ–ß–ê–Ø –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    search_words = query.strip().lower().split()
    base_query = Place.query.filter(Place.category != '–ò–∫–æ–Ω–∫–∞')

    if not search_words:
        return base_query

    conditions = []
    for word in search_words:
        if len(word) >= 2:
            pattern = f'%{word}%'

            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
            category_mapping = {
                '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
                '–∫–∞—Ñ–µ': '–ö–∞—Ñ–µ',
                '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω',
                '–º—É–∑–µ–π': '–ú—É–∑–µ–π',
                '—Ç–µ–∞—Ç—Ä': '–¢–µ–∞—Ç—Ä',
                '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞': '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
                '–ø–∞—Ä–∫': '–ü–∞—Ä–∫',
                '–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä': '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
                '—Å–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞': '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞',
                '—Ü–µ—Ä–∫–æ–≤—å': '–¶–µ—Ä–∫–æ–≤—å',
                '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞': '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞',
                '–æ—Ç–µ–ª—å': '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞',
                '–∫–æ—Ñ–µ–π–Ω—è': '–ö–∞—Ñ–µ',
                '–±–∞—Ä': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
                '–ø–∏—Ü—Ü–µ—Ä–∏—è': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
                '—Å—É—à–∏': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
                '–ø–∞–±': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
                '–±–∏—Å—Ç—Ä–æ': '–†–µ—Å—Ç–æ—Ä–∞–Ω'
            }

            # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å, —Ç–µ–≥–∏)
            word_conditions = [
                Place.title.ilike(pattern),
                Place.description.ilike(pattern),
                Place.tags.ilike(pattern),
                Place.address.ilike(pattern),
                Place.telephone.ilike(pattern),
                # –î–û–ë–ê–í–õ–Ø–ï–ú –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                Place.category.ilike(pattern),
                Place.category_en.ilike(pattern)
            ]

            # –î–û–ë–ê–í–õ–Ø–ï–ú –ø–æ–∏—Å–∫ –ø–æ –º–∞–ø–ø–∏–Ω–≥—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Ä–µ—Å—Ç–æ—Ä–∞–Ω" -> –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–†–µ—Å—Ç–æ—Ä–∞–Ω")
            if word in category_mapping:
                category_ru = category_mapping[word]
                word_conditions.append(Place.category == category_ru)
                print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '{word}' -> '{category_ru}'")

            # –î–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
            if any(cyrillic in word for cyrillic in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'):
                word_conditions.extend([
                    Place.title.ilike(f'%{word.capitalize()}%'),
                    Place.title.ilike(f'%{word.upper()}%'),
                    Place.address.ilike(f'%{word.capitalize()}%'),
                    Place.address.ilike(f'%{word.upper()}%'),
                    # –î–û–ë–ê–í–õ–Ø–ï–ú –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
                    Place.category.ilike(f'%{word.capitalize()}%'),
                    Place.category.ilike(f'%{word.upper()}%')
                ])

            word_condition = db.or_(*word_conditions)
            conditions.append(word_condition)

    if conditions:
        return base_query.filter(db.and_(*conditions))
    else:
        return base_query.filter(False)



#–ê–¥–º–∏–Ω—Å–∫–∏–µ —à—Ç—É–∫–∏ - –ù–ê–ß–ê–õ–û

@app.route('/admin/api/create-test-data')
def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç
        if Place.query.count() == 0:
            test_place = Place(
                title='–¢–µ—Å—Ç–æ–≤—ã–π –†–µ—Å—Ç–æ—Ä–∞–Ω',
                description='–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                category='–†–µ—Å—Ç–æ—Ä–∞–Ω',
                category_en='restaurant',
                slug='test-restaurant'
            )
            db.session.add(test_place)
            db.session.commit()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤
        if Review.query.count() == 0:
            test_review = Review(
                restaurant_id='1',  # ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞
                username='–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                rating=5,
                comment='–û—Ç–ª–∏—á–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ!',
                user_token='test_token',
                device_fingerprint='test_fingerprint'
            )
            db.session.add(test_review)
            db.session.commit()

        return jsonify({'success': True, 'message': '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã'})

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/admin/api/debug')
def admin_debug():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üõ†Ô∏è –û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –≤—ã–∑–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
        total_places = Place.query.count()
        total_reviews = Review.query.count()
        total_users = User.query.count()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
        recent_reviews = Review.query.order_by(Review.created_at.desc()).limit(3).all()
        reviews_data = []
        for review in recent_reviews:
            reviews_data.append({
                'id': review.id,
                'username': review.username,
                'rating': review.rating,
                'comment': review.comment
            })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        session_info = {
            'username': session.get('username'),
            'has_session': 'username' in session
        }

        return jsonify({
            'status': 'ok',
            'database': {
                'total_places': total_places,
                'total_reviews': total_reviews,
                'total_users': total_users,
                'recent_reviews_count': len(recent_reviews)
            },
            'session': session_info,
            'recent_reviews': reviews_data
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º endpoint: {e}")
        return jsonify({'error': str(e)}), 500

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'username' not in session:
            flash('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'error')
            return redirect(url_for('index'))

        user = User.query.filter_by(username=session['username']).first()

        # –î–æ–±–∞–≤–ª—è–µ–º current_user –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        from flask import g
        g.current_user = user

        return f(*args, **kwargs)

    return decorated_function

@app.route('/admin/api/stats')
@admin_required
def admin_stats():
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_places = Place.query.count()
        total_reviews = Review.query.count()
        total_users = User.query.count()

        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        avg_rating_result = db.session.query(db.func.avg(Review.rating)).scalar()
        avg_rating = round(avg_rating_result, 2) if avg_rating_result else 0.0

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
        recent_reviews = Review.query.order_by(Review.created_at.desc()).limit(10).all()
        reviews_data = []
        for review in recent_reviews:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ ID
            place = None
            if review.restaurant_id.isdigit():
                place = Place.query.get(int(review.restaurant_id))
            else:
                # –ï—Å–ª–∏ ID –Ω–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π, –∏—â–µ–º –ø–æ slug
                place = Place.query.filter_by(slug=review.restaurant_id).first()

            reviews_data.append({
                'id': review.id,
                'username': review.username,
                'rating': review.rating,
                'comment': review.comment,
                'created_at': review.created_at.isoformat(),
                'place_title': place.title if place else review.restaurant_id
            })

        return jsonify({
            'total_places': total_places,
            'total_reviews': total_reviews,
            'total_users': total_users,
            'avg_rating': avg_rating,
            'recent_reviews': reviews_data
        })

    except Exception as e:
        print(f"Error in admin_stats: {e}")
        return jsonify({'error': str(e)}), 500

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
@app.route('/admin/api/reviews')
@admin_required
def admin_reviews():
    try:
        page = request.args.get('page', 1, type=int)
        per_page = 20

        reviews = Review.query.order_by(Review.created_at.desc()).paginate(
            page=page, per_page=per_page, error_out=False
        )

        reviews_data = []
        for review in reviews.items:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ ID
            place = None
            if review.restaurant_id.isdigit():
                place = Place.query.get(int(review.restaurant_id))
            else:
                place = Place.query.filter_by(slug=review.restaurant_id).first()

            reviews_data.append({
                'id': review.id,
                'username': review.username,
                'rating': review.rating,
                'comment': review.comment,
                'created_at': review.created_at.isoformat(),
                'likes': review.likes or 0,
                'dislikes': review.dislikes or 0,
                'place_title': place.title if place else review.restaurant_id,
                'restaurant_id': review.restaurant_id
            })

        return jsonify({
            'reviews': reviews_data,
            'total': reviews.total,
            'pages': reviews.pages,
            'current_page': page
        })

    except Exception as e:
        print(f"Error in admin_reviews: {e}")
        return jsonify({'error': str(e)}), 500

# API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
@app.route('/admin/api/reviews/<int:review_id>', methods=['DELETE'])
@admin_required
def admin_delete_review(review_id):
    try:
        review = Review.query.get_or_404(review_id)
        restaurant_id = review.restaurant_id

        db.session.delete(review)
        db.session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        update_restaurant_stats(restaurant_id)

        return jsonify({'success': True, 'message': '–û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω'})

    except Exception as e:
        db.session.rollback()
        print(f"Error deleting review: {e}")
        return jsonify({'error': str(e)}), 500

# API –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
@app.route('/admin/api/reviews/<int:review_id>', methods=['PUT'])
@admin_required
def admin_edit_review(review_id):
    try:
        data = request.get_json()
        review = Review.query.get_or_404(review_id)

        if 'rating' in data:
            new_rating = int(data['rating'])
            if new_rating < 1 or new_rating > 5:
                return jsonify({'error': '–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5'}), 400
            review.rating = new_rating

        if 'comment' in data:
            review.comment = data['comment']

        review.updated_at = datetime.utcnow()
        db.session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        update_restaurant_stats(review.restaurant_id)

        return jsonify({'success': True, 'message': '–û—Ç–∑—ã–≤ –æ–±–Ω–æ–≤–ª–µ–Ω'})

    except Exception as e:
        db.session.rollback()
        print(f"Error editing review: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/admin/api/users', methods=['GET'])
@admin_required
def get_admin_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        users = User.query.all()
        current_user = User.query.filter_by(username=session['username']).first()

        users_data = []
        for user in users:
            users_data.append({
                'id': user.id,
                'username': user.username,
                'role': user.role,
                'role_display': get_role_display(user.role),
                'created_at': user.created_at.isoformat() if user.created_at else None,
                'last_login': user.last_login.isoformat() if user.last_login else None,
                'can_edit': can_edit_user(current_user, user),
                'can_delete': can_delete_user(current_user, user)
            })

        return jsonify({'users': users_data})

    except Exception as e:
        return jsonify({'error': str(e)}), 500

def get_role_display(role):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
    role_names = {
        'trainee': '–°—Ç–∞–∂—ë—Ä',
        'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
        'editor': '–†–µ–¥–∞–∫—Ç–æ—Ä',
        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    }
    return role_names.get(role, role)

def can_edit_user(current_user, target_user):
    """–ú–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤–æ–≥–æ"""
    if current_user.role == 'admin':
        return target_user.username != 'admin'  # –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    elif current_user.role == 'editor':
        return target_user.role in ['trainee', 'moderator']
    elif current_user.role == 'moderator':
        return target_user.role == 'trainee'
    return False

def can_delete_user(current_user, target_user):
    """–ú–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–≥–æ"""
    return can_edit_user(current_user, target_user)  # –¢–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞

@app.route('/admin/api/users/<int:user_id>/role', methods=['PUT'])
@admin_required
def admin_change_user_role(user_id):
    """API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        current_user = User.query.filter_by(username=session['username']).first()
        target_user = User.query.get_or_404(user_id)

        data = request.get_json()
        new_role = data.get('role')

        if not new_role or new_role not in ['trainee', 'moderator', 'editor', 'admin']:
            return jsonify({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å'}), 400

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if not current_user.can_manage_user(target_user):
            return render_template('Error.html', error_code=403, error_message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), 403

        # –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        if target_user.username == 'admin' and current_user.username != 'admin':
            return render_template('Error.html', error_code=403, error_message="–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"), 403


        # –ù–µ–ª—å–∑—è –ø–æ–Ω–∏–∂–∞—Ç—å —Å–µ–±—è
        if target_user.id == current_user.id and new_role != current_user.role:
            return jsonify({'error': '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å'}), 403

        target_user.role = new_role
        db.session.commit()

        return jsonify({
            'success': True,
            'message': f'–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.username} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {get_role_display_name(new_role)}'
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/admin/api/users/<int:user_id>', methods=['DELETE'])
@admin_required
def admin_delete_user(user_id):
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        current_user = User.query.filter_by(username=session['username']).first()
        target_user = User.query.get_or_404(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if not current_user.can_manage_user(target_user):
            return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}), 403

        # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        if target_user.username == 'admin':
            return jsonify({'error': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}), 403

        # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
        if target_user.id == current_user.id:
            return jsonify({'error': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è'}), 403

        db.session.delete(target_user)
        db.session.commit()

        return jsonify({'success': True, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω'})

    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500


@app.route('/admin/api/users', methods=['POST'])
@admin_required
@permission_required('manage_trainees')
def admin_create_user():
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        current_user = User.query.filter_by(username=session['username']).first()
        data = request.get_json()

        username = data.get('username')
        password = data.get('password')
        role = data.get('role', 'trainee')
        full_name = data.get('full_name')
        email = data.get('email')

        if not username or not password:
            return jsonify({'error': '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–æ–π —Ä–æ–ª—å—é
        role_hierarchy = {'trainee': 1, 'moderator': 2, 'editor': 3, 'admin': 4}
        if role_hierarchy.get(role, 0) > role_hierarchy.get(current_user.role, 0):
            return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–æ–π —Ä–æ–ª—å—é'}), 403

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')
        new_user = User(
            username=username,
            password=hashed_password,
            role=role,
            full_name=full_name,
            email=email,
            is_active=True
        )

        db.session.add(new_user)
        db.session.commit()

        return jsonify({
            'success': True,
            'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω –∫–∞–∫ {get_role_display_name(role)}',
            'user': {
                'id': new_user.id,
                'username': new_user.username,
                'role': new_user.role,
                'role_display': get_role_display_name(new_user.role),
                'full_name': new_user.full_name,
                'email': new_user.email
            }
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/admin/api/change_role', methods=['POST'])
@admin_required
def change_user_role():
    """API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        user_id = data.get('user_id')
        new_role = data.get('role')

        if not user_id or not new_role:
            return jsonify({'error': 'Missing user_id or role'}), 400

        if new_role not in ['trainee', 'moderator', 'editor']:
            return jsonify({'error': 'Invalid role'}), 400

        user = User.query.get_or_404(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if user.username == 'admin':
            return jsonify({'error': 'Cannot change admin role'}), 403

        user.role = new_role
        db.session.commit()

        return jsonify({
            'success': True,
            'message': f'–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}'
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

#–ê–¥–º–∏–Ω—Å–∫–∏–µ —à—Ç—É–∫–∏ - –ö–û–ù–ï–¶



# –û–±–Ω–æ–≤–∏–º endpoint –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@app.route('/api/reviews/<int:review_id>/permissions', methods=['GET'])
def get_review_permissions(review_id):
    try:
        review = Review.query.get_or_404(review_id)
        user_token = request.args.get('user_token')
        device_fingerprint = request.args.get('device_fingerprint')

        if not user_token or review.user_token != user_token:
            return jsonify({
                'can_edit': False,
                'can_delete': False,
                'reason': '–ù–µ –≤–∞—à –æ—Ç–∑—ã–≤'
            })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if review.device_fingerprint != device_fingerprint:
            return jsonify({
                'can_edit': False,
                'can_delete': False,
                'reason': '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å —Ç–æ–≥–æ –∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'
            })

        return jsonify({
            'can_edit': review.can_edit(),
            'can_delete': review.can_delete(),
            'time_left_edit': max(0, 3*3600 - (datetime.now(timezone.utc) - review.created_at).total_seconds()),
            'time_left_delete': max(0, 6*3600 - (datetime.now(timezone.utc) - review.created_at).total_seconds())
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/reviews/<int:review_id>/can_edit', methods=['GET'])
def can_edit_review(review_id):
    try:
        review = Review.query.get_or_404(review_id)
        user_token = request.args.get('user_token')
        device_fingerprint = request.args.get('device_fingerprint')

        if not user_token or review.user_token != user_token:
            return jsonify({'can_edit': False, 'reason': '–ù–µ –≤–∞—à –æ—Ç–∑—ã–≤'})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (3 —á–∞—Å–∞)
        time_diff = datetime.now(timezone.utc) - review.created_at
        if time_diff.total_seconds() > 3 * 3600:
            return jsonify({'can_edit': False, 'reason': '–í—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ'})

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if review.device_fingerprint != device_fingerprint:
            return jsonify({'can_edit': False, 'reason': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Ç–æ–≥–æ –∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'})

        return jsonify({
            'can_edit': True,
            'time_left': 3 * 3600 - time_diff.total_seconds()
        })

    except Exception as e:
        return jsonify({'can_edit': False, 'reason': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã review
def check_review_table_structure():
    try:
        conn = sqlite3.connect('instance/database.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∑—ã–≤–æ–≤
        cursor.execute("SELECT id, user_token, device_fingerprint FROM review ORDER BY id DESC LIMIT 5")
        reviews = cursor.fetchall()

        print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∑—ã–≤–æ–≤:")
        for review in reviews:
            print(f"  ID: {review[0]}, Token: {review[1]}, Fingerprint: {review[2]}")

        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")


def check_columns_exist():
    try:
        conn = sqlite3.connect('instance/database.db')
        cursor = conn.cursor()

        cursor.execute("PRAGMA table_info(review)")
        columns = [column[1] for column in cursor.fetchall()]

        print("–°—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ review:")
        for column in columns:
            print(f"  - {column}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = ['user_token', 'device_fingerprint']
        for col in required_columns:
            if col in columns:
                print(f"‚úì {col} exists")
            else:
                print(f"‚úó {col} missing")

        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")


check_columns_exist()

@app.route('/api/reviews/<int:review_id>', methods=['PUT'])
def edit_review(review_id):
    try:
        print(f"=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê {review_id} ===")

        data = request.get_json()
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        if not data:
            return jsonify({'error': 'No data provided'}), 400

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤
        review = Review.query.get(review_id)
        if not review:
            return jsonify({'error': 'Review not found'}), 404

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        user_token = data.get('user_token')
        device_fingerprint = data.get('device_fingerprint')

        print(f"User token –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {user_token}")
        print(f"User token –≤ –æ—Ç–∑—ã–≤–µ: {review.user_token}")
        print(f"Device fingerprint –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {device_fingerprint}")
        print(f"Device fingerprint –≤ –æ—Ç–∑—ã–≤–µ: {review.device_fingerprint}")

        if not user_token:
            return jsonify({'error': 'User token required'}), 400

        if not device_fingerprint:
            return jsonify({'error': 'Device fingerprint required'}), 400

        # –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –±–µ–∑ user_token, –û–ë–ù–û–í–õ–Ø–ï–ú –µ–≥–æ
        if review.user_token is None:
            print("üîÑ –û—Ç–∑—ã–≤ –±–µ–∑ user_token - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã")
            review.user_token = user_token
            review.device_fingerprint = device_fingerprint
        # –ï—Å–ª–∏ user_token –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –æ—à–∏–±–∫–∞ (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ —ç—Ç–æ legacy)
        elif review.user_token != user_token:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ user_token")
            return jsonify({'error': 'Permission denied - user token mismatch'}), 403

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è (3 —á–∞—Å–∞)
        now_utc = datetime.utcnow()
        if review.created_at.tzinfo is not None:
            created_at_naive = review.created_at.replace(tzinfo=None)
        else:
            created_at_naive = review.created_at

        time_diff = now_utc - created_at_naive
        hours_diff = time_diff.total_seconds() / 3600
        print(f"–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è: {hours_diff:.2f} —á–∞—Å–æ–≤")

        if hours_diff > 3:
            print("‚ùå –í—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
            return jsonify({'error': 'Editing time expired (3 hours limit)'}), 403

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if 'rating' in data:
            new_rating = data['rating']
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {review.rating} -> {new_rating}")
            review.rating = new_rating

        if 'comment' in data:
            new_comment = data['comment']
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {review.comment} -> {new_comment}")
            review.comment = new_comment

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        review.updated_at = datetime.utcnow()
        print(f"üïê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {review.updated_at}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db.session.commit()
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        update_restaurant_stats(review.restaurant_id)
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        # –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –¥–∞–Ω–Ω—ã–µ
        response_data = {
            'success': True,
            'message': 'Review updated successfully',
            'review': {
                'id': review.id,
                'username': review.username,
                'rating': review.rating,
                'comment': review.comment,
                'updated_at': review.updated_at.isoformat() if review.updated_at else None,
                'user_token': review.user_token,  # ‚úÖ –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_token
                'device_fingerprint': review.device_fingerprint,  # ‚úÖ –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π device_fingerprint
                'created_at': review.created_at.isoformat(),
                'likes': review.likes or 0,
                'dislikes': review.dislikes or 0,
                'user_ratings': review.user_ratings or {}
            }
        }

        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {response_data}")
        return jsonify(response_data)

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

def check_database_structure():
    try:
        conn = sqlite3.connect('instance/database.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã review
        cursor.execute("PRAGMA table_info(review)")
        columns = cursor.fetchall()

        print("=== –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ REVIEW ===")
        for column in columns:
            print(f"Column: {column[1]}, Type: {column[2]}, Nullable: {column[3]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
        cursor.execute("SELECT id, user_token, device_fingerprint FROM review LIMIT 5")
        sample_data = cursor.fetchall()

        print("=== –î–ê–ù–ù–´–ï –í –¢–ê–ë–õ–ò–¶–ï ===")
        for row in sample_data:
            print(f"ID: {row[0]}, User Token: {row[1]}, Device Fingerprint: {row[2]}")

        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")

check_database_structure()

@app.route('/api/reviews/<int:review_id>/can_edit', methods=['GET'])
def check_can_edit(review_id):
    try:
        review = Review.query.get_or_404(review_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_token = request.args.get('user_token')
        device_fingerprint = request.args.get('device_fingerprint')

        if not user_token or not device_fingerprint:
            return jsonify({'can_edit': False, 'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'}), 400

        can_edit, reason = can_edit_review(
            review,
            user_token,
            device_fingerprint,
            request.remote_addr
        )

        return jsonify({
            'can_edit': can_edit,
            'reason': reason,
            'time_left': get_time_left(review.created_at) if can_edit else None
        })

    except Exception as e:
        return jsonify({'can_edit': False, 'reason': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


def get_time_left(created_at):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    time_passed = datetime.now(timezone.utc) - created_at
    time_left = 3 * 3600 - time_passed.total_seconds()
    return max(0, time_left)  # –ù–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

def register_user(username, password, secret_key, role='trainee'):
    try:
        if secret_key != app.config['SECRET_KEY']:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á."

        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

        # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

        new_user = User(
            username=username,
            password=hashed_password,
            role=role
        )
        db.session.add(new_user)
        db.session.commit()
        return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {role}."

    except Exception as e:
        return False, str(e)

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤
def check_review_limit_per_restaurant(user_token, restaurant_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –æ—Ç–∑—ã–≤–æ–≤ (1 –æ—Ç–∑—ã–≤ –≤ –¥–µ–Ω—å –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω)"""
    try:
        time_limit = datetime.now() - timedelta(hours=24)

        recent_reviews_count = Review.query.filter(
            Review.user_token == user_token,
            Review.restaurant_id == restaurant_id,
            Review.created_at >= time_limit
        ).count()

        return recent_reviews_count < 1
    except Exception as e:
        print(f"Error checking review limit: {e}")
        return True

@app.route('/api/reviews/<int:review_id>', methods=['PUT', 'DELETE'])
def handle_single_review(review_id):
    if request.method == 'PUT':
        return update_review(review_id)
    elif request.method == 'DELETE':
        return delete_review(review_id)


@app.route('/api/restaurants/<restaurant_id>/stats', methods=['GET'])
def get_restaurant_stats(restaurant_id):
    reviews = Review.query.filter_by(restaurant_id=restaurant_id).all()

    if not reviews:
        return jsonify({
            'average_rating': 0,
            'total_reviews': 0,
            'ratings': {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
        })

    total_reviews = len(reviews)
    average_rating = sum(review.rating for review in reviews) / total_reviews

    ratings = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
    for review in reviews:
        ratings[review.rating] += 1

    return jsonify({
        'average_rating': average_rating,
        'total_reviews': total_reviews,
        'ratings': ratings
    })


@app.route('/api/restaurants/<string:restaurant_id>', methods=['GET'])
def get_restaurant(restaurant_id):
    print(f"DEBUG: restaurant_id = {restaurant_id}, type = {type(restaurant_id)}")

    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
    if callable(restaurant_id):
        print("ERROR: restaurant_id is a function! This shouldn't happen.")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        restaurant_id = request.args.get('restaurant_id', 'lambs')
        print(f"Using fallback ID: {restaurant_id}")


    try:
        restaurant = db.session.get(Restaurant, restaurant_id)
        if not restaurant:
            return jsonify({'error': '–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

        return jsonify({
            'id': restaurant.id,
            'name': restaurant.name,
            'total_rating': restaurant.total_rating,
            'review_count': restaurant.review_count
        })
    except Exception as e:
        print(f"Error in get_restaurant: {e}")
        return jsonify({'error': 'Internal server error'}), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
@app.route('/api/reviews')
def get_reviews():
    restaurant_id = request.args.get('restaurant_id')
    print(f"üîç –ó–∞–ø—Ä–æ—à–µ–Ω—ã –æ—Ç–∑—ã–≤—ã –¥–ª—è restaurant_id: {restaurant_id}")

    if not restaurant_id:
        return jsonify({'error': 'restaurant_id is required'}), 400

    try:
        reviews = Review.query.filter_by(restaurant_id=restaurant_id) \
            .order_by(Review.created_at.desc()) \
            .all()

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {restaurant_id}")

        reviews_data = []
        for review in reviews:
            reviews_data.append({
                'id': review.id,
                'restaurant_id': review.restaurant_id,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                'username': review.username,
                'rating': review.rating,
                'comment': review.comment,
                'created_at': review.created_at.isoformat(),
                'likes': review.likes or 0,
                'dislikes': review.dislikes or 0,
                'user_token': review.user_token,
                'device_fingerprint': review.device_fingerprint,
                'user_ratings': review.user_ratings or {}
            })

        return jsonify(reviews_data)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/reviews/<int:review_id>/rate', methods=['POST'])
def handle_review_rating(review_id):
    try:
        data = request.get_json()
        print(f"=== –û–ë–†–ê–ë–û–¢–ö–ê –û–¶–ï–ù–ö–ò –û–¢–ó–´–í–ê ===")
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        action = data.get('action')
        user_token = data.get('user_token')

        if not user_token:
            return jsonify({'error': 'User token required'}), 400

        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∑—ã–≤
        review = Review.query.get(review_id)
        if not review:
            return jsonify({'error': 'Review not found'}), 404

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_ratings –µ—Å–ª–∏ –Ω–µ—Ç
        if not review.user_ratings:
            review.user_ratings = {}

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user_rating = review.user_ratings.get(user_token)
        print(f"–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {current_user_rating}")

        new_likes = review.likes
        new_dislikes = review.dislikes
        new_user_rating = None

        # –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –æ—Ç–ø—Ä–∞–≤–∫–∞ like/dislike –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É
        if action == 'like':
            if current_user_rating == 'like':
                # –°–Ω–∏–º–∞–µ–º –ª–∞–π–∫
                new_likes = max(0, review.likes - 1)
                if user_token in review.user_ratings:
                    del review.user_ratings[user_token]
                new_user_rating = None
                print("–õ–∞–π–∫ —Å–Ω—è—Ç")
            else:
                # –°—Ç–∞–≤–∏–º –ª–∞–π–∫ (–µ—Å–ª–∏ –±—ã–ª –¥–∏–∑–ª–∞–π–∫ - –º–µ–Ω—è–µ–º)
                if current_user_rating == 'dislike':
                    new_dislikes = max(0, review.dislikes - 1)
                new_likes = review.likes + 1
                review.user_ratings[user_token] = 'like'
                new_user_rating = 'like'
                print("–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω —Å –¥–∏–∑–ª–∞–π–∫–∞")

        elif action == 'dislike':
            if current_user_rating == 'dislike':
                # –°–Ω–∏–º–∞–µ–º –¥–∏–∑–ª–∞–π–∫
                new_dislikes = max(0, review.dislikes - 1)
                if user_token in review.user_ratings:
                    del review.user_ratings[user_token]
                new_user_rating = None
                print("–î–∏–∑–ª–∞–π–∫ —Å–Ω—è—Ç")
            else:
                # –°—Ç–∞–≤–∏–º –¥–∏–∑–ª–∞–π–∫ (–µ—Å–ª–∏ –±—ã–ª –ª–∞–π–∫ - –º–µ–Ω—è–µ–º)
                if current_user_rating == 'like':
                    new_likes = max(0, review.likes - 1)
                new_dislikes = review.dislikes + 1
                review.user_ratings[user_token] = 'dislike'
                new_user_rating = 'dislike'
                print("–î–∏–∑–ª–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω —Å –ª–∞–π–∫–∞")

        else:
            return jsonify({'error': 'Invalid action. Use "like" or "dislike"'}), 400

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        review.likes = new_likes
        review.dislikes = new_dislikes

        # –ü–æ–º–µ—á–∞–µ–º user_ratings –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
        from sqlalchemy.orm.attributes import flag_modified
        flag_modified(review, "user_ratings")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db.session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
        db.session.refresh(review)

        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –ª–∞–π–∫–∏={review.likes}, –¥–∏–∑–ª–∞–π–∫–∏={review.dislikes}, user_rating={review.user_ratings.get(user_token)}")
        print("===============================")

        return jsonify({
            'likes': review.likes,
            'dislikes': review.dislikes,
            'user_rating': review.user_ratings.get(user_token),
            'user_ratings': review.user_ratings or {}
        })

    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –≤ handle_review_rating: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500

@app.route('/api/reviews/<int:review_id>/like', methods=['POST'])
def like_review(review_id):
    try:
        review = Review.query.get_or_404(review_id)
        review.likes += 1
        db.session.commit()
        return jsonify({'likes': review.likes})
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/reviews/<int:review_id>/dislike', methods=['POST'])
def dislike_review(review_id):
    try:
        review = Review.query.get_or_404(review_id)
        review.dislikes += 1
        db.session.commit()
        return jsonify({'dislikes': review.dislikes})
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500


@app.route('/api/reviews/<int:review_id>', methods=['PUT'])
def update_review(review_id):
    try:
        data = request.get_json()
        print(f"Updating review {review_id} with data: {data}")

        review = Review.query.get_or_404(review_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not data:
            return jsonify({'error': 'No data provided'}), 400

        user_token = data.get('user_token')
        if not user_token:
            return jsonify({'error': 'User token required'}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if review.user_token != user_token and not review.user_token.startswith('legacy_token_'):
            return jsonify({'error': 'Permission denied'}), 403

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if 'rating' in data:
            review.rating = data['rating']
        if 'comment' in data:
            review.comment = data['comment']

        review.updated_at = datetime.now(timezone.utc)
        db.session.commit()

        return jsonify({
            'message': 'Review updated successfully',
            'review': {
                'id': review.id,
                'rating': review.rating,
                'comment': review.comment,
                'updated_at': review.updated_at.isoformat()
            }
        })

    except Exception as e:
        db.session.rollback()
        print(f"Error updating review: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500


@app.route('/api/reviews', methods=['POST'])
def create_review():
    if request.method == 'POST':
        try:
            data = request.get_json()
            print("=== –°–û–ó–î–ê–ù–ò–ï –û–¢–ó–´–í–ê ===")
            print("–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", data)

            if not data:
                return jsonify({'error': 'No data provided'}), 400

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['restaurant_id', 'username', 'rating']
            missing_fields = [field for field in required_fields if field not in data]

            if missing_fields:
                return jsonify({'error': f'Missing required fields: {missing_fields}'}), 400

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            rating = int(data['rating'])
            if rating < 1 or rating > 5:
                return jsonify({'error': 'Rating must be between 1 and 5'}), 400

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            user_token = data.get('user_token')
            device_fingerprint = data.get('device_fingerprint')
            restaurant_id = data['restaurant_id']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if not check_review_limit_per_restaurant(user_token, restaurant_id):
                return jsonify({'error': '–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è'}), 429

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
            review = Review(
                restaurant_id=restaurant_id,
                username=data['username'],
                rating=rating,
                comment=data.get('comment', ''),
                user_token=user_token,
                device_fingerprint=device_fingerprint,
                likes=0,
                dislikes=0,
                user_ratings={}
            )

            print(f"üîç –ü–ï–†–ï–î –°–û–•–†–ê–ù–ï–ù–ò–ï–ú:")
            print(f"   user_token: '{review.user_token}'")
            print(f"   device_fingerprint: '{review.device_fingerprint}'")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db.session.add(review)
            db.session.commit()
            db.session.refresh(review)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            update_restaurant_stats(restaurant_id)

            # –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON, –∞ –Ω–µ HTML
            response_data = {
                'success': True,
                'message': 'Review added successfully',
                'review': {
                    'id': review.id,
                    'restaurant_id': review.restaurant_id,
                    'username': review.username,
                    'rating': review.rating,
                    'comment': review.comment,
                    'created_at': review.created_at.isoformat(),
                    'likes': review.likes,
                    'dislikes': review.dislikes,
                    'user_token': review.user_token,
                    'device_fingerprint': review.device_fingerprint,
                    'user_ratings': review.user_ratings
                }
            }

            print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:", response_data)
            return jsonify(response_data), 201  # ‚úÖ –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {str(e)}")
            import traceback
            traceback.print_exc()
            db.session.rollback()
            return jsonify({'error': str(e)}), 500

@app.route('/api/debug_current_endpoint', methods=['POST'])
def debug_current_endpoint():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫–æ–π endpoint —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω"""
    print("=== DEBUG: –¢–ï–ö–£–©–ò–ô ENDPOINT –í–´–ó–í–ê–ù ===")
    data = request.get_json()
    print("–î–∞–Ω–Ω—ã–µ:", data)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
    review = Review(
        restaurant_id=data['restaurant_id'],
        username=data['username'],
        rating=data['rating'],
        comment=data.get('comment', ''),
        user_token=data['user_token'],
        device_fingerprint=data['device_fingerprint'],
        ip_address=request.remote_addr
    )

    db.session.add(review)
    db.session.commit()
    db.session.refresh(review)

    return jsonify({
        'success': True,
        'endpoint': 'debug_current_endpoint',
        'review': {
            'id': review.id,
            'user_token': review.user_token,
            'device_fingerprint': review.device_fingerprint
        }
    })

@app.route('/api/fix_legacy_reviews', methods=['POST'])
def fix_legacy_reviews():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –±–µ–∑ user_token"""
    try:
        reviews = Review.query.filter(Review.user_token.is_(None)).all()

        for review in reviews:
            review.user_token = f'legacy_token_{review.id}'
            review.device_fingerprint = f'legacy_device_{review.id}'

        db.session.commit()
        return jsonify({'message': f'Fixed {len(reviews)} legacy reviews'})

    except Exception as e:
        db.session.rollback()
        return render_template('Error.html', error_code=500, error_message=e), 500

@app.route('/api/migrate_legacy_reviews', methods=['POST'])
def migrate_legacy_reviews():
    """–ú–∏–≥—Ä–∞—Ü–∏—è legacy –æ—Ç–∑—ã–≤–æ–≤ –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        user_token = data.get('user_token')
        device_fingerprint = data.get('device_fingerprint')

        if not user_token or not device_fingerprint:
            return render_template('Error.html', error_code=400, error_message="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–æ–∫–µ–Ω –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ —Å–æ–≤–ø–æ–¥–∞—é—Ç"), 400

        # –ù–∞—Ö–æ–¥–∏–º legacy –æ—Ç–∑—ã–≤—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_ip = request.remote_addr

        # –ò—â–µ–º legacy –æ—Ç–∑—ã–≤—ã
        legacy_reviews = Review.query.filter(
            (Review.user_token.startswith('legacy_token_'))

        ).all()

        migrated_count = 0
        for review in legacy_reviews:
            # –ó–∞–º–µ–Ω—è–µ–º legacy —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
            review.user_token = user_token
            review.device_fingerprint = device_fingerprint
            migrated_count += 1

        db.session.commit()

        return jsonify({
            'success': True,
            'message': f'Migrated {migrated_count} legacy reviews',
            'migrated_count': migrated_count
        })

    except Exception as e:
        db.session.rollback()
        return render_template('Error.html', error_code=500, error_message=e), 500

@app.route('/api/debug/reviews')
def debug_review(review_id):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Ç–∑—ã–≤—É"""
    try:
        review = Review.query.get(review_id)
        if not review:
            return render_template('Error.html', error_code=404), 404

        return jsonify({
            'id': review.id,
            'username': review.username,
            'user_token': review.user_token,
            'device_fingerprint': review.device_fingerprint,
            'created_at': review.created_at.isoformat(),
            'ip_address': review.ip_address
        })
    except Exception as e:
        return render_template('Error.html', error_code=500, error_message=e), 500

@app.route('/api/test_review_creation', methods=['POST'])
def test_review_creation():
    """–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        data = request.get_json()
        print("=== –¢–ï–°–¢–û–í–û–ï –°–û–ó–î–ê–ù–ò–ï –û–¢–ó–´–í–ê ===")
        print("–î–∞–Ω–Ω—ã–µ:", data)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
        review = Review(
            restaurant_id=data['restaurant_id'],
            username=data['username'],
            rating=data['rating'],
            comment=data.get('comment', ''),
            user_token=data['user_token'],
            device_fingerprint=data['device_fingerprint'],
            ip_address=request.remote_addr,
            likes=0,
            dislikes=0,
            user_ratings={}
        )

        print(f"–ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º - user_token: '{review.user_token}'")
        print(f"–ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º - device_fingerprint: '{review.device_fingerprint}'")

        db.session.add(review)
        db.session.commit()
        db.session.refresh(review)

        print(f"–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - user_token: '{review.user_token}'")
        print(f"–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - device_fingerprint: '{review.device_fingerprint}'")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return jsonify({
            'success': True,
            'review': {
                'id': review.id,
                'username': review.username,
                'rating': review.rating,
                'comment': review.comment,
                'created_at': review.created_at.isoformat(),
                'user_token': review.user_token,
                'device_fingerprint': review.device_fingerprint,
                'likes': review.likes,
                'dislikes': review.dislikes,
                'user_ratings': review.user_ratings
            }
        })

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return render_template('Error.html', error_code=500, error_message=e), 500

@app.route('/api/debug/review/<int:review_id>')
def debug_review_endpoint(review_id):
    """Endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–∑—ã–≤–∞"""
    debug_review(review_id)
    return jsonify({'message': 'Check server logs for debug info'})

@app.route('/api/test_simple_update', methods=['PUT'])
def test_simple_update():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint"""
    try:
        data = request.get_json()
        print("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:", data)
        return jsonify({
            'success': True,
            'message': '–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω',
            'received_data': data,
            'test': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç'
        })
    except Exception as e:
        return render_template('Error.html', error_code=500, error_message=e), 500

@app.route('/api/reviews/<int:review_id>', methods=['DELETE'])
def delete_review(review_id):
    try:
        data = request.get_json()
        print(f"=== –£–î–ê–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê {review_id} ===")
        print(f"–î–∞–Ω–Ω—ã–µ: {data}")

        if not data:
            return render_template('Error.html', error_code=400, error_message="–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö"), 400

        user_token = data.get('user_token')
        device_fingerprint = data.get('device_fingerprint')

        if not user_token or not device_fingerprint:
            return render_template('Error.html', error_code=400, error_message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ —Ç–æ"), 400

        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∑—ã–≤
        review = Review.query.get(review_id)
        if not review:
            return render_template('Error.html', error_code=404), 404

        print(f"User token –≤ –æ—Ç–∑—ã–≤–µ: {review.user_token}")
        print(f"User token –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {user_token}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        if not review.user_token or review.user_token != user_token:
            print("–û—à–∏–±–∫–∞: –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ user_token")
            return render_template('Error.html', error_code=403, error_message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–≤–ø–æ–¥–∞–µ—Ç"), 403

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è (6 —á–∞—Å–æ–≤)
        now_utc = datetime.utcnow()
        if review.created_at.tzinfo is not None:
            created_at_naive = review.created_at.replace(tzinfo=None)
        else:
            created_at_naive = review.created_at

        time_diff = now_utc - created_at_naive
        hours_diff = time_diff.total_seconds() / 3600

        print(f"–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è: {hours_diff:.2f} —á–∞—Å–æ–≤")

        if hours_diff > 6:
            print("–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
            return render_template('Error.html', error_code=403, error_message="–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"), 403


        # –°–æ—Ö—Ä–∞–Ω—è–µ–º restaurant_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        restaurant_id = review.restaurant_id

        # –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤
        db.session.delete(review)
        db.session.commit()

        # –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø
        update_restaurant_stats(restaurant_id)

        print("–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        return jsonify({
            'message': 'Review deleted successfully',
            'restaurant_id': restaurant_id
        })

    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return render_template('Error.html', error_code=500), 500

def fix_image_paths():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ"""
    with app.app_context():
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø—É—Ç–∏ –≤ –±–∞–∑–µ
        places = Place.query.all()
        for place in places:
            if place.image_path and '–§–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π' in place.image_path:
                place.image_path = place.image_path.replace('–§–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π', 'images')

        db.session.commit()
        print("‚úÖ –ü—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


def initialize_icons():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –ø—É—Ç—è–º–∏"""
    with app.app_context():
        category_icons = {
            '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'icon_restaurant.png',
            '–ö–∞—Ñ–µ': 'icon_cafe.png',
            '–ú–∞–≥–∞–∑–∏–Ω': 'icon_shop.png',
            '–ú—É–∑–µ–π': 'icon_museum.png',
            '–¢–µ–∞—Ç—Ä': 'icon_theatre.png',
            '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞': 'icon_library.png',
            '–ü–∞—Ä–∫': 'icon_park.png',
            '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä': 'icon_cinema.png',
            '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞': 'icon_sports.png',
            '–¶–µ—Ä–∫–æ–≤—å': 'icon_church.png',
            '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞': 'icon_hotel.png'
        }

        for category, icon in category_icons.items():
            existing_icon = Place.query.filter_by(category='–ò–∫–æ–Ω–∫–∞', title=category).first()

            if not existing_icon:
                icon_place = Place(
                    title=category,
                    category='–ò–∫–æ–Ω–∫–∞',
                    category_en='icon',
                    image_path=f'images/{icon}',  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—É—Ç—å
                    slug=f'icon_{category.lower()}'
                )
                db.session.add(icon_place)

        db.session.commit()
        print("‚úÖ –ò–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É")

def create_category_icon(category_name):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∫–æ–Ω–∫–∞
    existing_icon = Place.query.filter_by(category='–ò–∫–æ–Ω–∫–∞', title=category_name).first()

    if not existing_icon:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–∫–æ–Ω–∫–∏
        new_icon = Place(
            title=category_name,
            category='–ò–∫–æ–Ω–∫–∞',
            category_en='icon',
            image_path='–§–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π/–ò–∫–æ–Ω–∫–∞–ú–µ—Å—Ç–∞.png',  # –ë–ï–ó static/!
            slug=f'icon_{category_name.lower().replace(" ", "_")}'
        )
        db.session.add(new_icon)
        db.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}")

@app.route('/add_place', methods=['GET', 'POST'])
@admin_required
def add_place():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    user = User.query.filter_by(username=session['username']).first()

    # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å—Ç–∞–∂—ë—Ä–∞–º, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º, —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∞–º
    if user.role not in ['trainee', 'moderator', 'editor', 'admin']:
        return render_template('Error.html', error_code=403, error_message="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"), 403

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã
    categories = db.session.query(Place.category).distinct().all()
    categories = [cat[0] for cat in categories if cat[0]]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ
    standard_categories = ['–†–µ—Å—Ç–æ—Ä–∞–Ω', '–ö–∞—Ñ–µ', '–ú–∞–≥–∞–∑–∏–Ω', '–ú—É–∑–µ–π', '–¢–µ–∞—Ç—Ä', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
                           '–ü–∞—Ä–∫', '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä', '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞', '–¶–µ—Ä–∫–æ–≤—å', '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–ò–∫–æ–Ω–∫–∞']

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    all_categories = list(set(categories + standard_categories))
    all_categories.sort()

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    existing_places = Place.query.with_entities(Place.slug).all()
    existing_places = [place[0] for place in existing_places if place[0]]

    if request.method == 'POST':
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            title = request.form.get('title', '').strip()
            description = request.form.get('description', '').strip()
            telephone = request.form.get('telephone', '').strip()
            address = request.form.get('address', '').strip()
            existing_category = request.form.get('existing_category', '').strip()
            new_category = request.form.get('new_category', '').strip()
            slug = request.form.get('slug', '').strip()
            tags = request.form.get('tags', '').strip()
            latitude = request.form.get('latitude', '').strip()
            longitude = request.form.get('longitude', '').strip()
            working_hours = request.form.get('working_hours', '{}')
            menu = request.form.get('menu', '{}')

            # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            if new_category and not existing_category:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                handle_new_category(new_category)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = existing_category or new_category
            if not category:
                flash('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error')
                return render_template('admin_add_place.html',
                                       categories=all_categories,
                                       existing_places=existing_places,
                                       current_user=user)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º category_en
            category_mapping = {
                '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'restaurant', '–ö–∞—Ñ–µ': 'cafe', '–ú–∞–≥–∞–∑–∏–Ω': 'shop',
                '–ú—É–∑–µ–π': 'museum', '–¢–µ–∞—Ç—Ä': 'theatre', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞': 'library',
                '–ü–∞—Ä–∫': 'park', '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä': 'cinema', '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞': 'sports',
                '–¶–µ—Ä–∫–æ–≤—å': 'church', '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞': 'hotel', '–ò–∫–æ–Ω–∫–∞': 'icon'
            }
            category_en = category_mapping.get(category, category.lower().replace(' ', '_'))

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not slug and title:
                slug = generate_slug(title)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
            image_path = None
            if 'image' in request.files:
                file = request.files['image']
                if file.filename != '':
                    if not allowed_file(file.filename):
                        flash('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞', 'error')
                        return render_template('admin_add_place.html',
                                               categories=all_categories,
                                               existing_places=existing_places,
                                               current_user=user)

                    filename = secure_filename(file.filename)
                    if not filename:
                        flash('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞', 'error')
                        return render_template('admin_add_place.html',
                                               categories=all_categories,
                                               existing_places=existing_places,
                                               current_user=user)

                    save_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                    try:
                        file.save(save_path)
                        image_path = '–§–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π/' + filename
                    except Exception as e:
                        app.logger.error(f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}')
                        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞', 'error')
                        return render_template('admin_add_place.html',
                                               categories=all_categories,
                                               existing_places=existing_places,
                                               current_user=user)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_place = Place(
                title=title or None,
                description=description or None,
                telephone=telephone or None,
                address=address or None,
                image_path=image_path,
                category=category,
                category_en=category_en,
                latitude=float(latitude) if latitude else None,
                longitude=float(longitude) if longitude else None,
                working_hours=working_hours,
                menu=menu,
                tags=tags or None,
                slug=slug
            )

            db.session.add(new_place)
            db.session.commit()

            flash('–ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', 'success')
            return redirect(url_for('admin_places'))

        except Exception as e:
            db.session.rollback()
            app.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞: {str(e)}')
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞: {str(e)}', 'error')
            return render_template('admin_add_place.html',
                                   categories=all_categories,
                                   existing_places=existing_places,
                                   current_user=user)

    # GET –∑–∞–ø—Ä–æ—Å
    return render_template('admin_add_place.html',
                           categories=all_categories,
                           existing_places=existing_places,
                           current_user=user)

def generate_slug(title):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
    translit_dict = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '',
        '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    }

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º
    slug = ''.join(translit_dict.get(c, c) for c in title if c.isalnum() or c.isspace())

    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    slug = re.sub(r'[^\w\s-]', '', slug)
    slug = re.sub(r'[-\s]+', '-', slug).strip('-')
    slug = ''.join(translit_dict.get(c, c) for c in title)
    slug = re.sub(r'[^a-z0-9-]', '-', slug)  # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ-–±—É–∫–≤—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    slug = re.sub(r'-+', '-', slug).strip('-')  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –¥–µ—Ñ–∏—Å—ã
    return slug

@app.route('/api/reviews/<int:review_id>/migrate', methods=['POST'])
def migrate_review(review_id):
    """–ú–∏–≥—Ä–∞—Ü–∏—è legacy –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        user_token = data.get('user_token')
        device_fingerprint = data.get('device_fingerprint')

        if not user_token or not device_fingerprint:
            return jsonify({'error': 'User token and device fingerprint required'}), 400

        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∑—ã–≤
        review = Review.query.get(review_id)
        if not review:
            return jsonify({'error': 'Review not found'}), 404

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ legacy –æ—Ç–∑—ã–≤
        if not review.user_token or not review.user_token.startswith('legacy_token_'):
            return jsonify({'error': 'Not a legacy review'}), 400

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ IP, username –∏ —Ç.–¥.

        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
        review.user_token = user_token
        review.device_fingerprint = device_fingerprint

        db.session.commit()

        return jsonify({
            'success': True,
            'message': 'Review migrated successfully',
            'review': {
                'id': review.id,
                'user_token': review.user_token,
                'device_fingerprint': review.device_fingerprint
            }
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.config['SECRET_KEY'] = get_secret('SECRET_KEY')

with app.app_context():
    db.create_all()

@app.route('/register', methods=['POST'])
def register():
    username = request.form['username']
    password = request.form['password']
    secret_key = request.form['secret_key']

    success, message = register_user(username, password, secret_key)
    if success:
        session['username'] = username
        return jsonify({'success': True, 'username': username})
    else:
        return jsonify({'success': False, 'message': message})

@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']

    user = User.query.filter_by(username=username).first()
    if user and bcrypt.check_password_hash(user.password, password):
        session['username'] = username
        return jsonify({'success': True, 'username': username})
    else:
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'})

@app.route('/logout', methods=['POST'])
def logout():
    session.pop('username', None)
    return jsonify({'success': True})

@app.route("/")
def index():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–æ–º–µ –ò–∫–æ–Ω–æ–∫)
    categories_from_db = db.session.query(Place.category).filter(Place.category != '–ò–∫–æ–Ω–∫–∞').distinct().all()
    categories_from_db = [cat[0] for cat in categories_from_db if cat[0]]

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
    standard_categories = ['–†–µ—Å—Ç–æ—Ä–∞–Ω', '–ö–∞—Ñ–µ', '–ú–∞–≥–∞–∑–∏–Ω', '–ú—É–∑–µ–π', '–¢–µ–∞—Ç—Ä', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
                           '–ü–∞—Ä–∫', '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä', '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞', '–¶–µ—Ä–∫–æ–≤—å', '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞']

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_categories = list(set(categories_from_db + standard_categories))
    all_categories.sort()

    # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã
    category_data = {}
    for category in all_categories:
        icon_place = Place.query.filter_by(category='–ò–∫–æ–Ω–∫–∞', title=category).first()

        if icon_place and icon_place.image_path:
            # –ü—Ä—è–º–æ–π –ø—É—Ç—å –±–µ–∑ url_for (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)
            icon_url = f'/static/{icon_place.image_path}'
        else:
            icon_url = '/static/–§–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π/–ò–∫–æ–Ω–∫–∞–ú–µ—Å—Ç–∞.png'

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category in ['–†–µ—Å—Ç–æ—Ä–∞–Ω', '–ö–∞—Ñ–µ', '–ú–∞–≥–∞–∑–∏–Ω', '–ú—É–∑–µ–π', '–¢–µ–∞—Ç—Ä', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
                        '–ü–∞—Ä–∫', '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä', '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞', '–¶–µ—Ä–∫–æ–≤—å', '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞']:
            category_url = f'/{category.lower()}'
        else:
            category_en = category.lower().replace(' ', '_')
            category_url = f'/{category_en}'

        category_data[category] = {
            'url': category_url,
            'icon': icon_url
        }

    return render_template("index.html",
                           title="–ì–æ—Ä–æ–¥—Å–∫–æ–π –≥–∏–¥",
                           categories=all_categories,
                           category_data=category_data)

def handle_new_category(category_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º"""
    import os

    icon_path = os.path.join(app.static_folder, '–§–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π', f'–ò–∫–æ–Ω–∫–∞{category_name}.png')
    default_icon = os.path.join(app.static_folder, '–§–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π', '–ò–∫–æ–Ω–∫–∞–ú–µ—Å—Ç–∞.png')

    # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not os.path.exists(icon_path):
        print(f"‚ö†Ô∏è  –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # import shutil
        # if os.path.exists(default_icon):
        #     shutil.copy2(default_icon, icon_path)

    return True

@app.route("/test", methods=['GET', 'POST'])
def test():
    return render_template("–õ–∏—á–Ω—ã–µ–°—Ç—Ä–∞–Ω–∏—Ü—ã/test.html", title="–ì–æ—Ä–æ–¥—Å–∫–æ–π –≥–∏–¥")

@app.route("/search", methods=["GET", "POST"])
def search():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–≥–æ–≤ –∏ —É–ª–∏—Ü—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ GET –∏–ª–∏ POST –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if request.method == 'POST':
            query = request.form.get('query', '').strip()
        else:
            query = request.args.get('q', '').strip()

        page = request.args.get('page', 1, type=int)
        per_page = 10

        print(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{query}', —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page}")

        if not query:
            return render_template("results.html",
                                   results=[],
                                   query="",
                                   title="–ü–æ–∏—Å–∫",
                                   current_page=1,
                                   total_pages=0,
                                   total_results=0)

        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
        base_query = advanced_search(query)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_results = base_query.count()
        total_pages = math.ceil(total_results / per_page) if total_results > 0 else 1

        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_results}, —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        results = base_query.offset((page - 1) * per_page).limit(per_page).all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        results_data = []
        for place in results:
            try:
                # –ü–†–ê–í–ò–õ–¨–ù–û –ø–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
                avg_rating = 0.0
                review_count = 0

                # –°–ø–æ—Å–æ–± 1: –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ Restaurant –ø–æ ID –º–µ—Å—Ç–∞
                restaurant = Restaurant.query.get(str(place.id))
                if restaurant and restaurant.total_rating is not None:
                    avg_rating = round(float(restaurant.total_rating), 1)
                    review_count = restaurant.review_count or 0
                    print(f"–†–µ–π—Ç–∏–Ω–≥ –∏–∑ Restaurant –¥–ª—è {place.title}: {avg_rating}")
                else:
                    # –°–ø–æ—Å–æ–± 2: –ò—â–µ–º –ø–æ slug
                    if place.slug:
                        restaurant_by_slug = Restaurant.query.get(place.slug)
                        if restaurant_by_slug and restaurant_by_slug.total_rating is not None:
                            avg_rating = round(float(restaurant_by_slug.total_rating), 1)
                            review_count = restaurant_by_slug.review_count or 0
                            print(f"–†–µ–π—Ç–∏–Ω–≥ –∏–∑ Restaurant –ø–æ slug –¥–ª—è {place.title}: {avg_rating}")
                    else:
                        # –°–ø–æ—Å–æ–± 3: –í—ã—á–∏—Å–ª—è–µ–º –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
                        reviews = Review.query.filter_by(restaurant_id=str(place.id)).all()
                        if reviews:
                            total_rating = sum(review.rating for review in reviews)
                            avg_rating = round(total_rating / len(reviews), 1)
                            review_count = len(reviews)
                            print(f"–†–µ–π—Ç–∏–Ω–≥ –∏–∑ Review –¥–ª—è {place.title}: {avg_rating}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º URL
                if place.slug and place.category_en:
                    place_url = url_for('place_page_by_slug',
                                        category_en=place.category_en,
                                        slug=place.slug,
                                        _external=False)
                else:
                    place_url = url_for('restaurant_page', id=place.id, _external=False)

                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                description = place.description or ''
                if len(description) > 200:
                    description = description[:200] + '...'

                results_data.append({
                    'id': place.id,
                    'title': place.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                    'description': description,
                    'telephone': place.telephone or '',
                    'address': place.address or '',
                    'image_path': place.image_path,
                    'category': place.category or '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                    'slug': place.slug,
                    'category_en': place.category_en,
                    'avg_rating': avg_rating,
                    'review_count': review_count,
                    'url': place_url,
                    'latitude': place.latitude,
                    'longitude': place.longitude
                })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–∞ {place.id}: {e}")
                continue

        print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results_data)}")

        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Ä–µ–Ω–¥–µ—Ä–∏–º HTML
        return render_template("results.html",
                               results=results_data,
                               query=query,
                               title=f"–ü–æ–∏—Å–∫: {query}",
                               current_page=page,
                               total_pages=total_pages,
                               total_results=total_results)

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()

        return render_template("results.html",
                               results=[],
                               query=query if 'query' in locals() else '',
                               title="–ü–æ–∏—Å–∫",
                               error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

@app.route('/api/search')
def api_search():
    """API –¥–ª—è AJAX –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏"""
    try:
        query = request.args.get('q', '').strip()
        page = request.args.get('page', 1, type=int)
        sort_by = request.args.get('sort_by', 'default')
        user_lat = request.args.get('lat', type=float)
        user_lon = request.args.get('lon', type=float)
        per_page = 10

        if not query:
            return jsonify({
                'results': [],
                'total_results': 0,
                'total_pages': 0,
                'current_page': page,
                'query': query
            })

        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –∏—Å–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫–∏
        base_query = Place.query.filter(Place.category != '–ò–∫–æ–Ω–∫–∞')
        base_query = advanced_search(query)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_results = base_query.count()
        total_pages = math.ceil(total_results / per_page) if total_results > 0 else 1

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        results = base_query.offset((page - 1) * per_page).limit(per_page).all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        results_data = []
        for place in results:
            restaurant = Restaurant.query.get(str(place.id))
            avg_rating = round(float(restaurant.total_rating), 1) if restaurant and restaurant.total_rating else 0.0
            review_count = restaurant.review_count if restaurant else 0

            if place.slug and place.category_en:
                place_url = url_for('place_page_by_slug', category_en=place.category_en, slug=place.slug,
                                    _external=False)
            else:
                place_url = url_for('restaurant_page', id=place.id, _external=False)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ—Å—Ç–∞
            distance = None
            if user_lat and user_lon and place.latitude and place.longitude:
                distance = calculate_distance(user_lat, user_lon, place.latitude, place.longitude)

            place_data = {
                'id': place.id,
                'title': place.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                'description': place.description or '',
                'telephone': place.telephone or '',
                'address': place.address or '',
                'image_path': place.image_path,
                'avg_rating': avg_rating,
                'review_count': review_count,
                'url': place_url,
                'latitude': place.latitude,
                'longitude': place.longitude,
                'distance': distance
            }
            results_data.append(place_data)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        if sort_by == 'distance' and user_lat and user_lon:
            results_data.sort(key=lambda x: x['distance'] if x['distance'] else float('inf'))
        elif sort_by == 'rating_high':
            results_data.sort(key=lambda x: x['avg_rating'], reverse=True)
        elif sort_by == 'rating_low':
            results_data.sort(key=lambda x: x['avg_rating'])
        elif sort_by == 'name_asc':
            results_data.sort(key=lambda x: (x['title'] or '').lower())
        elif sort_by == 'name_desc':
            results_data.sort(key=lambda x: (x['title'] or '').lower(), reverse=True)

        return jsonify({
            'results': results_data,
            'total_results': total_results,
            'total_pages': total_pages,
            'current_page': page,
            'query': query
        })

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ API –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'error': 'Internal server error'}), 500

def calculate_distance(lat1, lon1, lat2, lon2):
    """–†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–º"""
    from math import radians, sin, cos, sqrt, atan2

    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º

    lat1_rad = radians(lat1)
    lon1_rad = radians(lon1)
    lat2_rad = radians(lat2)
    lon2_rad = radians(lon2)

    dlon = lon2_rad - lon1_rad
    dlat = lat2_rad - lat1_rad

    a = sin(dlat / 2) ** 2 + cos(lat1_rad) * cos(lat2_rad) * sin(dlon / 2) ** 2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    return R * c

@app.route('/restaurant/<int:id>')
def restaurant_page(id):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ ID"""
    try:
        place = Place.query.get_or_404(id)
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—Ç–æ: {place.title}, ID: {id}")

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π
        template_name = f'–õ–∏—á–Ω—ã–µ–°—Ç—Ä–∞–Ω–∏—Ü—ã/{place.title}.html'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
        import os
        template_path = os.path.join(app.root_path, 'templates', template_name)

        if os.path.exists(template_path):
            return render_template(template_name, place=place)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —à–∞–±–ª–æ–Ω
            return render_template('place_template.html', place=place)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {id}: {e}")
        abort(404)  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 404

@app.route('/<category_en>/<slug>')
def place_page_by_slug(category_en, slug):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Å–µ—Ö –º–µ—Å—Ç –ø–æ slug"""
    print(f"–ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞: category_en={category_en}, slug={slug}")

    place = Place.query.filter_by(category_en=category_en, slug=slug).first_or_404()
    print(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ: {place.title}")

    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
    template_name = f'–õ–∏—á–Ω—ã–µ–°—Ç—Ä–∞–Ω–∏—Ü—ã/{place.title}.html'
    import os
    template_path = os.path.join(app.root_path, 'templates', template_name)

    if os.path.exists(template_path):
        return render_template(template_name, place=place)
    else:
        return render_template('place_template.html', place=place)

# –ü–û–¢–û–ú –º–∞—Ä—à—Ä—É—Ç —Å –û–î–ù–ò–ú –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
@app.route('/<category_type>')
def universal_category_page(category_type):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –í–°–ï–• –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º
    SPECIAL_ROUTES = ['404', '500', 'test', 'admin', 'debug', 'favorites', 'add_place']
    if category_type in SPECIAL_ROUTES:
        return render_template('error.html',
                               error_code=404,
                               error_name="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"), 404

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã
    all_categories = db.session.query(Place.category, Place.category_en).distinct().all()

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è category_en -> category
    category_mapping = {}
    for cat_ru, cat_en in all_categories:
        if cat_ru and cat_en:
            category_mapping[cat_en] = cat_ru

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if category_type not in category_mapping:
        return render_template('Error.html',
                               error_code=404,
                               error_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"), 404

    category_ru = category_mapping[category_type]

    page = request.args.get('page', 1, type=int)
    per_page = 10

    places_query = Place.query.filter_by(category=category_ru)
    total_places = places_query.count()
    total_pages = math.ceil(total_places / per_page) if total_places > 0 else 1

    places = places_query.offset((page - 1) * per_page).limit(per_page).all()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã restaurants
    places_with_ratings = []
    for place in places:
        restaurant = None

        if place.slug:
            restaurant = Restaurant.query.get(place.slug)

        if not restaurant and place.category_en:
            restaurant = Restaurant.query.get(place.category_en)

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if not restaurant:
            special_cases = {
                'Brewmen': 'Brewmen',
            }
            if place.title in special_cases:
                restaurant = Restaurant.query.get(special_cases[place.title])

        if restaurant and restaurant.total_rating is not None:
            avg_rating = round(restaurant.total_rating, 1)
            review_count = restaurant.review_count or 0
        else:
            avg_rating = 0.0
            review_count = 0

        places_with_ratings.append({
            'place': place,
            'avg_rating': avg_rating,
            'review_count': review_count,
            'restaurant_found': bool(restaurant)
        })

    return render_template('category_template.html',
                           places=places,
                           places_with_ratings=places_with_ratings,
                           category_name=category_ru,
                           current_page=page,
                           total_pages=total_pages,
                           category_type=category_type)

@app.route('/update-restaurant-ratings')
def update_restaurant_ratings():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    try:
        places = Place.query.all()
        updated_count = 0

        for place in places:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
            update_restaurant_stats(str(place.id))
            updated_count += 1

        return jsonify({
            'success': True,
            'message': f'–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è {updated_count} –º–µ—Å—Ç',
            'updated_count': updated_count
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/filtered-places')
def api_filtered_places():
    """API –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç"""
    try:
        category = request.args.get('category')
        sort_by = request.args.get('sort_by', 'default')

        if not category:
            return jsonify({'error': 'Category is required'}), 400

        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = Place.query.filter_by(category=category)
        places = query.all()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
        places_with_ratings = []
        for place in places:
            avg_rating = get_average_rating(place.id)
            places_with_ratings.append({
                'id': place.id,
                'title': place.title,
                'description': place.description,
                'telephone': place.telephone,
                'address': place.address,
                'image_path': place.image_path,
                'category_en': place.category_en,
                'slug': place.slug,
                'avg_rating': avg_rating
            })

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if sort_by == 'rating_high':
            places_with_ratings.sort(key=lambda x: x['avg_rating'], reverse=True)
        elif sort_by == 'rating_low':
            places_with_ratings.sort(key=lambda x: x['avg_rating'])
        elif sort_by == 'name_asc':
            places_with_ratings.sort(key=lambda x: (x['title'] or '').lower())
        elif sort_by == 'name_desc':
            places_with_ratings.sort(key=lambda x: (x['title'] or '').lower(), reverse=True)

        return jsonify({
            'places': places_with_ratings,
            'total': len(places_with_ratings)
        })

    except Exception as e:
        print(f"Error in api_filtered_places: {e}")
        return jsonify({'error': 'Internal server error'}), 500

def get_average_rating(place_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã restaurants"""
    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ ID
        restaurant = Restaurant.query.get(str(place_id))
        if restaurant and restaurant.total_rating:
            return round(restaurant.total_rating, 1)

        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ restaurants, –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
        reviews = Review.query.filter_by(restaurant_id=str(place_id)).all()
        if not reviews:
            return 0

        total_rating = sum(review.rating for review in reviews)
        average_rating = total_rating / len(reviews)
        return round(average_rating, 1)

    except Exception as e:
        print(f"Error calculating average rating for place {place_id}: {e}")
        return 0

# API endpoint –¥–ª—è AJAX –∑–∞–≥—Ä—É–∑–∫–∏
@app.route('/api/categories/<category_slug>')
def api_category_places(category_slug):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    CATEGORY_MAPPING = {
        'restaurant': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
        'coffee': '–ö–∞—Ñ–µ',
        'shop': '–ú–∞–≥–∞–∑–∏–Ω',
        'museums': '–ú—É–∑–µ–π',
        'theatre': '–¢–µ–∞—Ç—Ä',
        'library': '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
        'park': '–ü–∞—Ä–∫',
        'cinema': '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
        'sports': '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞',
        'church': '–¶–µ—Ä–∫–æ–≤—å',
        'hotels': '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞'
    }

    if category_slug not in CATEGORY_MAPPING:
        return jsonify({'error': 'Category not found'}), 404

    category_ru = CATEGORY_MAPPING[category_slug]
    page = request.args.get('page', 1, type=int)
    per_page = 10

    places_query = Place.query.filter_by(category=category_ru)
    total_places = places_query.count()
    total_pages = math.ceil(total_places / per_page)

    places = places_query.offset((page - 1) * per_page).limit(per_page).all()

    places_data = []
    for place in places:
        # –¢–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        restaurant = None

        if place.slug:
            restaurant = Restaurant.query.get(place.slug)

        if not restaurant and place.category_en:
            restaurant = Restaurant.query.get(place.category_en)

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if not restaurant:
            special_cases = {
                'Brewmen': 'Brewmen',
            }
            if place.title in special_cases:
                restaurant = Restaurant.query.get(special_cases[place.title])

        if restaurant and restaurant.total_rating is not None:
            avg_rating = round(restaurant.total_rating, 1)
        else:
            avg_rating = 0.0

        places_data.append({
            'id': place.id,
            'title': place.title,
            'description': place.description,
            'telephone': place.telephone,
            'address': place.address,
            'image_path': place.image_path,
            'category_en': place.category_en,
            'slug': place.slug,
            'avg_rating': avg_rating,
            'latitude': place.latitude,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            'longitude': place.longitude
        })

    return jsonify({
        'places': places_data,
        'current_page': page,
        'total_pages': total_pages,
        'has_next': page < total_pages,
        'has_prev': page > 1
    })

@app.route('/api/popular-places-by-category')
def api_popular_places_by_category():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        print("üîç Starting popular places by category search...")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫—Ä–æ–º–µ –ò–∫–æ–Ω–æ–∫)
        categories = db.session.query(Place.category).filter(
            Place.category != '–ò–∫–æ–Ω–∫–∞',
            Place.category.isnot(None)
        ).distinct().all()

        categories = [cat[0] for cat in categories if cat[0]]
        print(f"üìÇ Found categories: {categories}")

        popular_places = []

        for category in categories:
            print(f"üîé Processing category: {category}")

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –º–µ—Å—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            places_in_category = Place.query.filter_by(category=category).all()
            print(f"   Found {len(places_in_category)} places in category")

            if not places_in_category:
                continue

            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            best_place = None
            best_score = -1
            best_restaurant = None

            for place in places_in_category:
                # –ò—â–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ Restaurant –ø–æ —Ä–∞–∑–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
                restaurant = None

                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID –º–µ—Å—Ç–∞
                if place.id:
                    restaurant = Restaurant.query.get(str(place.id))

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ slug
                if not restaurant and place.slug:
                    restaurant = Restaurant.query.get(place.slug)

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                if not restaurant and place.title:
                    restaurant = Restaurant.query.filter_by(name=place.title).first()

                if restaurant and restaurant.total_rating is not None and restaurant.review_count:
                    # –°—á–∏—Ç–∞–µ–º "–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å" –∫–∞–∫ —Ä–µ–π—Ç–∏–Ω–≥ * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                    score = restaurant.total_rating * restaurant.review_count

                    if score > best_score:
                        best_score = score
                        best_place = place
                        best_restaurant = restaurant
                        print(f"   üèÜ New best place: {place.title} with score {score}")

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ Restaurant, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if not best_place:
                best_place = places_in_category[0]
                print(f"   üìù Using first place: {best_place.title}")

            if best_place:
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL
                if best_place.slug and best_place.category_en:
                    place_url = url_for('place_page_by_slug',
                                        category_en=best_place.category_en,
                                        slug=best_place.slug,
                                        _external=False)
                else:
                    place_url = url_for('restaurant_page', id=best_place.id, _external=False)

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                avg_rating = 0.0
                review_count = 0

                if best_restaurant:
                    avg_rating = round(float(best_restaurant.total_rating), 1)
                    review_count = best_restaurant.review_count
                else:
                    # –ü—Ä–æ–±—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
                    reviews = Review.query.filter_by(restaurant_id=str(best_place.id)).all()
                    if reviews:
                        total_rating = sum(review.rating for review in reviews)
                        avg_rating = round(total_rating / len(reviews), 1)
                        review_count = len(reviews)

                popular_places.append({
                    'category': category,
                    'place': {
                        'id': best_place.id,
                        'title': best_place.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                        'description': best_place.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                        'telephone': best_place.telephone or '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω',
                        'address': best_place.address or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
                        'image_path': best_place.image_path,
                        'avg_rating': avg_rating,
                        'review_count': review_count,
                        'url': place_url
                    }
                })
                print(f"   ‚úÖ Added {best_place.title} to popular places")

        print(f"üéØ Total popular places found: {len(popular_places)}")

        return jsonify({
            'success': True,
            'popular_places': popular_places
        })

    except Exception as e:
        print(f"‚ùå Error in api_popular_places_by_category: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'message': 'Internal server error'}), 500

@app.route('/api/random-place')
def api_random_place():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å slug (–∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        places = Place.query.filter(Place.slug.isnot(None)).all()

        if not places:
            return jsonify({'success': False, 'message': 'No places found'}), 404  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å 404

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ
        import random
        random_place = random.choice(places)

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        place_url = url_for('place_page_by_slug',
                            category_en=random_place.category_en,
                            slug=random_place.slug)

        return jsonify({
            'success': True,
            'place_url': place_url,
            'place_title': random_place.title
        })

    except Exception as e:
        print(f"Error in api_random_place: {e}")
        return jsonify({'success': False, 'message': 'Internal server error'}), 500


@app.route('/api/popular-place')
def api_popular_place():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–∑—ã–≤–æ–≤
        restaurants = Restaurant.query.filter(
            Restaurant.total_rating > 0,
            Restaurant.review_count > 0
        ).all()

        if not restaurants:
            return jsonify({'success': False, 'message': 'No rated places found'}), 404

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
        popular_restaurant = max(restaurants, key=lambda r: (
            r.total_rating,  # –æ—Å–Ω–æ–≤–Ω–æ–µ - —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            r.review_count,  # –≤—Ç–æ—Ä–æ–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
            r.last_updated.timestamp() if r.last_updated else 0  # —Ç—Ä–µ—Ç—å–µ - –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ))

        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ—Å—Ç–æ
        place = None

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ slug
        if popular_restaurant.id:
            place = Place.query.filter_by(slug=popular_restaurant.id).first()

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if not place:
            place = Place.query.filter_by(title=popular_restaurant.name).first()

        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ —Å —Ç–∞–∫–∏–º –∂–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        if not place:
            place = Place.query.first()

        if not place:
            return jsonify({'success': False, 'message': 'Place not found'}), 404

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        place_url = url_for('place_page_by_slug',
                            category_en=place.category_en,
                            slug=place.slug, _external=False)

        return jsonify({
            'success': True,
            'place': {
                'id': place.id,
                'title': place.title,
                'description': place.description,
                'telephone': place.telephone,
                'address': place.address,
                'image_path': place.image_path,
                'avg_rating': round(popular_restaurant.total_rating, 1),
                'review_count': popular_restaurant.review_count,
                'category': place.category,
                'url': place_url,
                'last_updated': popular_restaurant.last_updated.isoformat() if popular_restaurant.last_updated else None
            }
        })

    except Exception as e:
        print(f"Error in api_popular_place: {e}")
        return jsonify({'success': False, 'message': 'Internal server error'}), 500

@app.route('/restaurants')
def restaurants_page():
    page = request.args.get('page', 1, type=int)
    per_page = 10  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 5 –¥–æ 10

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Place —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '–†–µ—Å—Ç–æ—Ä–∞–Ω'
    total_restaurants = Place.query.filter_by(category='–†–µ—Å—Ç–æ—Ä–∞–Ω').count()
    total_pages = math.ceil(total_restaurants / per_page)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    restaurants = Place.query.filter_by(category='–†–µ—Å—Ç–æ—Ä–∞–Ω') \
        .offset((page - 1) * per_page) \
        .limit(per_page) \
        .all()

    # –ï—Å–ª–∏ —ç—Ç–æ AJAX –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        restaurants_data = []
        for restaurant in restaurants:
            restaurants_data.append({
                'id': restaurant.id,
                'title': restaurant.title,
                'description': restaurant.description,
                'telephone': restaurant.telephone,
                'address': restaurant.address,
                'image_path': restaurant.image_path
            })

        return jsonify({
            'restaurants': restaurants_data,
            'current_page': page,
            'total_pages': total_pages,
            'has_next': page < total_pages,
            'has_prev': page > 1
        })

    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Ä–µ–Ω–¥–µ—Ä–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return render_template('Restaurant.html',
                           restaurants=restaurants,
                           current_page=page,
                           total_pages=total_pages,
                           title="–†–µ—Å—Ç–æ—Ä–∞–Ω—ã")
@app.route("/favorites", methods=["GET"])
def favorites():
    print(url_for("favorites"))
    return render_template("favorites.html", title="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")

@app.route('/admin/dashboard')
@admin_required
def admin_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user = User.query.filter_by(username=session['username']).first()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total_places': Place.query.count(),
        'total_reviews': Review.query.count(),
        'total_users': User.query.count(),
        'avg_rating': db.session.query(db.func.avg(Review.rating)).scalar() or 0
    }

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
    recent_reviews = []
    if user.has_permission('edit_review'):
        recent_reviews = Review.query.order_by(Review.created_at.desc()).limit(10).all()
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–∑—ã–≤—É
        for review in recent_reviews:
            place = Place.query.get(int(review.restaurant_id)) if review.restaurant_id.isdigit() else None
            review.place_title = place.title if place else review.restaurant_id

    return render_template('admin_dashboard.html',
                           current_user=user,
                           stats=stats,
                           recent_reviews=recent_reviews)

@app.route('/admin/users')
@admin_required
@permission_required('manage_trainees')
def admin_users():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    user = User.query.filter_by(username=session['username']).first()
    users = User.query.all()

    return render_template('admin_users.html',
                           current_user=user,
                           users=users)

@app.route('/admin/logout', methods=['POST'])
def admin_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    session.pop('username', None)
    flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success')
    return redirect(url_for('index'))


@app.route('/admin/')
@app.route('/admin')
@admin_required
def admin_panel():
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    user = User.query.filter_by(username=session['username']).first()

    # –î–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    return redirect(url_for('admin_dashboard'))

@app.route('/admin/places')
@admin_required
def admin_places():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è–º–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user = User.query.filter_by(username=session['username']).first()

    # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å—Ç–∞–∂—ë—Ä–∞–º, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º, —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∞–º
    if user.role not in ['trainee', 'moderator', 'editor', 'admin']:
        return render_template('Error.html', error_code=403, error_message="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"), 403

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è - 50 –∑–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = request.args.get('page', 1, type=int)
    per_page = 50

    places_pagination = Place.query.paginate(
        page=page,
        per_page=per_page,
        error_out=False
    )

    return render_template('admin_places.html',
                           current_user=user,
                           places=places_pagination.items,
                           pagination=places_pagination)

@app.route('/admin/places/<int:place_id>/edit')
@admin_required
def edit_place(place_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    user = User.query.filter_by(username=session['username']).first()
    if user.role == 'trainee':
        return render_template('Error.html', error_code=403, error_message="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"), 403

    place = Place.query.get_or_404(place_id)
    categories = ['–†–µ—Å—Ç–æ—Ä–∞–Ω', '–ö–∞—Ñ–µ', '–ú–∞–≥–∞–∑–∏–Ω', '–ú—É–∑–µ–π', '–¢–µ–∞—Ç—Ä', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
                  '–ü–∞—Ä–∫', '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä', '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞', '–¶–µ—Ä–∫–æ–≤—å', '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–ò–∫–æ–Ω–∫–∞']

    return render_template('edit_place.html',
                           current_user=user,
                           place=place,
                           categories=categories)


@app.route('/admin/api/places/<int:place_id>', methods=['DELETE'])
@admin_required
def admin_delete_place(place_id):
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    try:
        user = User.query.filter_by(username=session['username']).first()
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —Å—Ç–∞–∂—ë—Ä–∞–º —É–¥–∞–ª—è—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è
        if user.role == 'trainee':
            return render_template('Error.html', error_code=403, error_message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"), 403

        place = Place.query.get_or_404(place_id)
        db.session.delete(place)
        db.session.commit()

        return jsonify({'success': True, 'message': '–ó–∞–≤–µ–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ'})

    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/admin/api/places/<int:place_id>', methods=['PUT'])
@admin_required
def admin_update_place(place_id):
    """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    try:
        user = User.query.filter_by(username=session['username']).first()
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —Å—Ç–∞–∂—ë—Ä–∞–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è
        if user.role == 'trainee':
            return render_template('Error.html', error_code=403, error_message="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"), 403

        place = Place.query.get_or_404(place_id)
        data = request.get_json()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if 'title' in data:
            place.title = data['title'].strip()
        if 'description' in data:
            place.description = data['description'].strip()
        if 'category' in data:
            place.category = data['category']
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º category_en
            category_mapping = {
                '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'restaurant', '–ö–∞—Ñ–µ': 'cafe', '–ú–∞–≥–∞–∑–∏–Ω': 'shop',
                '–ú—É–∑–µ–π': 'museum', '–¢–µ–∞—Ç—Ä': 'theatre', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞': 'library',
                '–ü–∞—Ä–∫': 'park', '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä': 'cinema', '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞': 'sports',
                '–¶–µ—Ä–∫–æ–≤—å': 'church', '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞': 'hotel', '–ò–∫–æ–Ω–∫–∞': 'icon'
            }
            place.category_en = category_mapping.get(data['category'], 'other')
        if 'telephone' in data:
            place.telephone = data['telephone'].strip()
        if 'address' in data:
            place.address = data['address'].strip()
        if 'slug' in data:
            place.slug = data['slug'].strip()
        if 'tags' in data:
            place.tags = data['tags'].strip()

        db.session.commit()

        return jsonify({'success': True, 'message': '–ó–∞–≤–µ–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'})

    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/admin/reviews')
@admin_required
def admin_reviews_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏"""
    user = User.query.filter_by(username=session['username']).first()
    if user.role == 'trainee':
        return render_template('Error.html', error_code=403, error_message="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"), 403

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    page = request.args.get('page', 1, type=int)
    per_page = 20

    reviews_pagination = Review.query.order_by(Review.created_at.desc()).paginate(
        page=page,
        per_page=per_page,
        error_out=False
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–∞—Ö –∫ –æ—Ç–∑—ã–≤–∞–º
    reviews_with_places = []
    for review in reviews_pagination.items:
        place = None
        if review.restaurant_id.isdigit():
            place = Place.query.get(int(review.restaurant_id))
        else:
            place = Place.query.filter_by(slug=review.restaurant_id).first()

        reviews_with_places.append({
            'review': review,
            'place_title': place.title if place else review.restaurant_id,
            'place_url': url_for('place_page_by_slug', category_en=place.category_en,
                                 slug=place.slug) if place and place.slug else url_for('restaurant_page',
                                                                                       id=place.id) if place else '#'
        })

    return render_template('admin_reviews.html',
                           current_user=user,
                           reviews_data=reviews_with_places,
                           pagination=reviews_pagination)

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.errorhandler(400)
@app.errorhandler(401)
@app.errorhandler(403)
@app.errorhandler(404)
@app.errorhandler(405)
@app.errorhandler(408)
@app.errorhandler(409)
@app.errorhandler(410)
@app.errorhandler(429)
@app.errorhandler(500)
@app.errorhandler(502)
@app.errorhandler(503)
@app.errorhandler(504)
def handle_error(error):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    error_code = getattr(error, 'code', 500)
    error_name = get_error_name(error_code)

    # –ï—Å–ª–∏ —ç—Ç–æ AJAX –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return jsonify({
            'error': True,
            'code': error_code,
            'name': error_name,
        }), error_code

    # –ò–Ω–∞—á–µ —Ä–µ–Ω–¥–µ—Ä–∏–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return render_template('error.html',
                           error_code=error_code,
                           error_name=error_name), error_code


def get_error_name(code):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–¥—É"""
    error_names = {
        400: "–ü–ª–æ—Ö–æ–π –∑–∞–ø—Ä–æ—Å",
        401: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
        403: "–ó–∞–ø—Ä–µ—â–µ–Ω–æ",
        404: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        405: "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω",
        408: "Bed signal",
        409: "–ö–æ–Ω—Ñ–ª–∏–∫—Ç",
        410: "–£–¥–∞–ª–µ–Ω–æ",
        429: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
        500: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        502: "–ü–ª–æ—Ö–æ–π —à–ª—é–∑",
        503: "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        504: "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —à–ª—é–∑–∞ –∏—Å—Ç–µ–∫–ª–æ"
    }
    return error_names.get(code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")


def migrate_categories_to_english():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ (–ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î)"""
    CATEGORY_MAPPING = {
        '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'Restaurant',
        '–ö–∞—Ñ–µ': 'Cafe',
        '–ú–∞–≥–∞–∑–∏–Ω': 'Shop',
        '–ú—É–∑–µ–π': 'Museum',
        '–¢–µ–∞—Ç—Ä': 'Theatre',
        '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞': 'Library',
        '–ü–∞—Ä–∫': 'Park',
        '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä': 'Cinema',
        '–°–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–∫–∞': 'Sports',
        '–¶–µ—Ä–∫–æ–≤—å': 'Church',
        '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞': 'Hotel',
        '–ò–∫–æ–Ω–∫–∞': 'Icon'
    }

    try:
        places = Place.query.all()
        for place in places:
            if place.category in CATEGORY_MAPPING:
                place.category_en = CATEGORY_MAPPING[place.category]
                # –¢–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not place.slug and place.title:
                    place.slug = generate_slug(place.title)
                print(f"‚úÖ {place.title}: {place.category} -> {place.category_en}")

        db.session.commit()
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π!")

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")


def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with app.app_context():
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            db.create_all()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
            restaurant_count = Place.query.filter_by(category='–†–µ—Å—Ç–æ—Ä–∞–Ω').count()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –±–∞–∑–µ: {restaurant_count}")

            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            migrate_categories_to_english()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def fix_slug_duplicates():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è slug"""
    with app.app_context():
        try:
            places = Place.query.all()
            used_slugs = set()

            for place in places:
                if not place.slug:
                    base_slug = generate_slug(place.title)
                    slug = base_slug
                    counter = 1

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
                    while slug in used_slugs:
                        slug = f"{base_slug}-{counter}"
                        counter += 1

                    place.slug = slug
                    used_slugs.add(slug)
                    print(f"‚úÖ {place.title}: slug={place.slug}")
                else:
                    used_slugs.add(place.slug)

            db.session.commit()
            print("‚úÖ –í—Å–µ slug –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")

        except Exception as e:
            db.session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è slug: {e}")


@app.route('/fix-slugs')
def fix_slugs_route():
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è slug"""
    fix_slug_duplicates()
    return "Slug –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!"


@app.route('/fix-ratings')
def fix_ratings():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
    try:
        places = Place.query.all()
        fixed_count = 0

        for place in places:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
            update_restaurant_stats(str(place.id))
            fixed_count += 1

        return jsonify({
            'success': True,
            'message': f'–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è {fixed_count} –º–µ—Å—Ç',
            'fixed_count': fixed_count
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    with app.app_context():
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.create_all()

        # –î—Ä—É–≥–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        migrate_categories_to_english()
        check_review_table_structure()

    app.run(debug=True)